// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: gl.proto

package gameslobby

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GamesLobbyClient is the client API for GamesLobby service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GamesLobbyClient interface {
	Entry(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EntryResult, error)
}

type gamesLobbyClient struct {
	cc grpc.ClientConnInterface
}

func NewGamesLobbyClient(cc grpc.ClientConnInterface) GamesLobbyClient {
	return &gamesLobbyClient{cc}
}

func (c *gamesLobbyClient) Entry(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EntryResult, error) {
	out := new(EntryResult)
	err := c.cc.Invoke(ctx, "/gameslobby.GamesLobby/Entry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GamesLobbyServer is the server API for GamesLobby service.
// All implementations must embed UnimplementedGamesLobbyServer
// for forward compatibility
type GamesLobbyServer interface {
	Entry(context.Context, *EntryRequest) (*EntryResult, error)
	mustEmbedUnimplementedGamesLobbyServer()
}

// UnimplementedGamesLobbyServer must be embedded to have forward compatible implementations.
type UnimplementedGamesLobbyServer struct {
}

func (UnimplementedGamesLobbyServer) Entry(context.Context, *EntryRequest) (*EntryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Entry not implemented")
}
func (UnimplementedGamesLobbyServer) mustEmbedUnimplementedGamesLobbyServer() {}

// UnsafeGamesLobbyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GamesLobbyServer will
// result in compilation errors.
type UnsafeGamesLobbyServer interface {
	mustEmbedUnimplementedGamesLobbyServer()
}

func RegisterGamesLobbyServer(s grpc.ServiceRegistrar, srv GamesLobbyServer) {
	s.RegisterService(&GamesLobby_ServiceDesc, srv)
}

func _GamesLobby_Entry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesLobbyServer).Entry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameslobby.GamesLobby/Entry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesLobbyServer).Entry(ctx, req.(*EntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GamesLobby_ServiceDesc is the grpc.ServiceDesc for GamesLobby service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GamesLobby_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gameslobby.GamesLobby",
	HandlerType: (*GamesLobbyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Entry",
			Handler:    _GamesLobby_Entry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gl.proto",
}
